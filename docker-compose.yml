services:
  api:
    build:
      context: ./api-server
      dockerfile: Dockerfile
    container_name: execute_academy-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # env_file:
    #   - .env
    environment:
      # Bind HTTP server to all interfaces inside the container
      API_HOST: "0.0.0.0"
      DATABASE_URL: "postgres://execute_academy@postgres:5432/execute_academy?sslmode=disable"
      REDIS_URL: "redis://redis:6379/0"
      # Kafka configuration for email queue
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_EMAIL_TOPIC: "emails"
      KAFKA_CLIENT_ID: "execute_academy_api"
      # Optional: seed admin defaults (use env or secrets in production)
      ADMIN_USERNAME: "admin"
      ADMIN_EMAIL: "admin@execute_academy.local"
      ADMIN_PASSWORD: "admin123"
    ports:
      - "8080:8080"
    entrypoint: ["/bin/sh", "-lc"]
    command: ["execute_academy migrate && execute_academy seed && exec execute_academy execute_academy-apis"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # web:
  #   build:
  #     context: ./web
  #     dockerfile: Dockerfile
  #     args:
  #       # Optional: bake API base URL into SSG assets if used
  #       API_BASE_URL: "http://api:8080"
  #   container_name: execute_academy-web
  #   depends_on:
  #     api:
  #       condition: service_started
  #   environment:
  #     NODE_ENV: production
  #     INTERNAL_API_BASE_URL: "http://api:8080"
  #     PORT: 3000
  #     HOSTNAME: 0.0.0.0
  #   ports:
  #     - "3000:3000"

  postgres:
    image: postgres:16-alpine
    container_name: execute_academy-postgres
    environment:
      POSTGRES_USER: execute_academy
      POSTGRES_DB: execute_academy
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U execute_academy"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: execute_academy-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka:
    image: bitnami/kafka:3.7
    container_name: execute_academy-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:9094,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
  kafka_data:
