/* tslint:disable */
/* eslint-disable */
/**
 * execute_academy API
 * REST API for execute_academy. See category, product, auth, and user endpoints.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Course,
  CourseModule,
  CreateCourseRequest,
  CreateLessonRequest,
  CreateModuleRequest,
  Lesson,
  UpdateCourseRequest,
  UpdateLessonRequest,
  UpdateModuleRequest,
} from '../models/index';
import {
    CourseFromJSON,
    CourseToJSON,
    CourseModuleFromJSON,
    CourseModuleToJSON,
    CreateCourseRequestFromJSON,
    CreateCourseRequestToJSON,
    CreateLessonRequestFromJSON,
    CreateLessonRequestToJSON,
    CreateModuleRequestFromJSON,
    CreateModuleRequestToJSON,
    LessonFromJSON,
    LessonToJSON,
    UpdateCourseRequestFromJSON,
    UpdateCourseRequestToJSON,
    UpdateLessonRequestFromJSON,
    UpdateLessonRequestToJSON,
    UpdateModuleRequestFromJSON,
    UpdateModuleRequestToJSON,
} from '../models/index';

export interface CreateCourseOperationRequest {
    createCourseRequest: CreateCourseRequest;
}

export interface CreateLessonOperationRequest {
    createLessonRequest: CreateLessonRequest;
}

export interface CreateModuleOperationRequest {
    createModuleRequest: CreateModuleRequest;
}

export interface UpdateCourseOperationRequest {
    updateCourseRequest: UpdateCourseRequest;
}

export interface UpdateLessonOperationRequest {
    updateLessonRequest: UpdateLessonRequest;
}

export interface UpdateModuleOperationRequest {
    updateModuleRequest: UpdateModuleRequest;
}

/**
 * 
 */
export class CoursesApi extends runtime.BaseAPI {

    /**
     */
    async createCourseRaw(requestParameters: CreateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'createCourseRequest',
                'Required parameter "createCourseRequest" was null or undefined when calling createCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCourseRequestToJSON(requestParameters['createCourseRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createCourse(requestParameters: CreateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createLessonRaw(requestParameters: CreateLessonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createLessonRequest'] == null) {
            throw new runtime.RequiredError(
                'createLessonRequest',
                'Required parameter "createLessonRequest" was null or undefined when calling createLesson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/modules/:module_id/lessons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLessonRequestToJSON(requestParameters['createLessonRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createLesson(requestParameters: CreateLessonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createLessonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createModuleRaw(requestParameters: CreateModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createModuleRequest'] == null) {
            throw new runtime.RequiredError(
                'createModuleRequest',
                'Required parameter "createModuleRequest" was null or undefined when calling createModule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/courses/:course_id/modules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateModuleRequestToJSON(requestParameters['createModuleRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createModule(requestParameters: CreateModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createModuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteCourseRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/courses/:id`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCourse(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCourseRaw(initOverrides);
    }

    /**
     */
    async deleteLessonRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lessons/:id`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteLesson(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLessonRaw(initOverrides);
    }

    /**
     */
    async deleteModuleRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/modules/:id`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteModule(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteModuleRaw(initOverrides);
    }

    /**
     */
    async getCourseByIdRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/courses/:id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     */
    async getCourseById(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.getCourseByIdRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCourseBySlugRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course/:slug`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     */
    async getCourseBySlug(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.getCourseBySlugRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listLessonsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Lesson>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/modules/:module_id/lessons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LessonFromJSON));
    }

    /**
     */
    async listLessons(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Lesson>> {
        const response = await this.listLessonsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listModulesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseModule>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/courses/:course_id/modules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseModuleFromJSON));
    }

    /**
     */
    async listModules(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseModule>> {
        const response = await this.listModulesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCourseRaw(requestParameters: UpdateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters['updateCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCourseRequest',
                'Required parameter "updateCourseRequest" was null or undefined when calling updateCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/courses/:id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCourseRequestToJSON(requestParameters['updateCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     */
    async updateCourse(requestParameters: UpdateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.updateCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLessonRaw(requestParameters: UpdateLessonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lesson>> {
        if (requestParameters['updateLessonRequest'] == null) {
            throw new runtime.RequiredError(
                'updateLessonRequest',
                'Required parameter "updateLessonRequest" was null or undefined when calling updateLesson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/lessons/:id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLessonRequestToJSON(requestParameters['updateLessonRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LessonFromJSON(jsonValue));
    }

    /**
     */
    async updateLesson(requestParameters: UpdateLessonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lesson> {
        const response = await this.updateLessonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateModuleRaw(requestParameters: UpdateModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseModule>> {
        if (requestParameters['updateModuleRequest'] == null) {
            throw new runtime.RequiredError(
                'updateModuleRequest',
                'Required parameter "updateModuleRequest" was null or undefined when calling updateModule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/modules/:id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateModuleRequestToJSON(requestParameters['updateModuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseModuleFromJSON(jsonValue));
    }

    /**
     */
    async updateModule(requestParameters: UpdateModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseModule> {
        const response = await this.updateModuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadLessonVideoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lesson>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lessons/:id/video`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LessonFromJSON(jsonValue));
    }

    /**
     */
    async uploadLessonVideo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lesson> {
        const response = await this.uploadLessonVideoRaw(initOverrides);
        return await response.value();
    }

}
