/* tslint:disable */
/* eslint-disable */
/**
 * execute_academy API
 * REST API for execute_academy. See category, product, auth, and user endpoints.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginRequest,
  LoginResponse,
  OkResponse,
  RefreshRequest,
  RegisterRequest,
  RegisterResponse,
  ResendOtpRequest,
  TokenResponse,
  VerifyOtpRequest,
} from '../models/index';
import {
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    OkResponseFromJSON,
    OkResponseToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RegisterResponseFromJSON,
    RegisterResponseToJSON,
    ResendOtpRequestFromJSON,
    ResendOtpRequestToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    VerifyOtpRequestFromJSON,
    VerifyOtpRequestToJSON,
} from '../models/index';

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

export interface RefreshOperationRequest {
    refreshRequest: RefreshRequest;
}

export interface RegisterOperationRequest {
    registerRequest: RegisterRequest;
}

export interface ResendOtpOperationRequest {
    resendOtpRequest: ResendOtpRequest;
}

export interface VerifyRequest {
    verifyOtpRequest: VerifyOtpRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Log in and receive access/refresh tokens
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Log in and receive access/refresh tokens
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout (stateless)
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseFromJSON(jsonValue));
    }

    /**
     * Logout (stateless)
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponse> {
        const response = await this.logoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * Exchange refresh token for new access token
     */
    async refreshRaw(requestParameters: RefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['refreshRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshRequest',
                'Required parameter "refreshRequest" was null or undefined when calling refresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Exchange refresh token for new access token
     */
    async refresh(requestParameters: RefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.refreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user account
     */
    async registerRaw(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterResponse>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user account
     */
    async register(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend OTP email
     */
    async resendOtpRaw(requestParameters: ResendOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponse>> {
        if (requestParameters['resendOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'resendOtpRequest',
                'Required parameter "resendOtpRequest" was null or undefined when calling resendOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/resend-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendOtpRequestToJSON(requestParameters['resendOtpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseFromJSON(jsonValue));
    }

    /**
     * Resend OTP email
     */
    async resendOtp(requestParameters: ResendOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponse> {
        const response = await this.resendOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify email with OTP code
     */
    async verifyRaw(requestParameters: VerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResponse>> {
        if (requestParameters['verifyOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyOtpRequest',
                'Required parameter "verifyOtpRequest" was null or undefined when calling verify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyOtpRequestToJSON(requestParameters['verifyOtpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResponseFromJSON(jsonValue));
    }

    /**
     * Verify email with OTP code
     */
    async verify(requestParameters: VerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResponse> {
        const response = await this.verifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
