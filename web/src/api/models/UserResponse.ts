/* tslint:disable */
/* eslint-disable */
/**
 * execute_academy API
 * REST API for execute_academy. See category, product, auth, and user endpoints.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    avatarUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    fullName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    isActive: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    isBlocked: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    username: string;
}

/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): value is UserResponse {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('isBlocked' in value) || value['isBlocked'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    return true;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'avatarUrl': json['avatar_url'] == null ? undefined : json['avatar_url'],
        'email': json['email'],
        'firstName': json['first_name'] == null ? undefined : json['first_name'],
        'fullName': json['full_name'] == null ? undefined : json['full_name'],
        'id': json['id'],
        'isActive': json['is_active'],
        'isBlocked': json['is_blocked'],
        'lastName': json['last_name'] == null ? undefined : json['last_name'],
        'role': json['role'],
        'username': json['username'],
    };
}

export function UserResponseToJSON(json: any): UserResponse {
    return UserResponseToJSONTyped(json, false);
}

export function UserResponseToJSONTyped(value?: UserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'avatar_url': value['avatarUrl'],
        'email': value['email'],
        'first_name': value['firstName'],
        'full_name': value['fullName'],
        'id': value['id'],
        'is_active': value['isActive'],
        'is_blocked': value['isBlocked'],
        'last_name': value['lastName'],
        'role': value['role'],
        'username': value['username'],
    };
}

